// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app.services', ['ngResource']).factory('Auth', [
    '$rootScope', '$http', '$q', '$window', 'SessionService', function($rootScope, $http, $q, $window, SessionService) {
      var accessLevels, authInstance, findUserRoleByBitMask, userRoles;
      $rootScope.accessLevels = accessLevels = routingConfig.accessLevels;
      $rootScope.userRoles = userRoles = routingConfig.userRoles;
      if (!$window.sessionStorage.user) {
        $rootScope.currentUser = {
          username: '',
          role: userRoles["public"]
        };
      }
      if ($window.sessionStorage.user) {
        $rootScope.currentUser = angular.fromJson($window.sessionStorage.user);
      }
      $http.defaults.headers.common['x-auth-token'] = $rootScope.currentUser.auth_token;
      findUserRoleByBitMask = function(roleBitMask) {
        return _.find(routingConfig.userRolesArray, function(item) {
          return item.bitMask === roleBitMask;
        });
      };
      authInstance = {};
      authInstance.passwordreset = function(email) {
        return SessionService.passwordreset({
          email_or_mobile: email
        });
      };
      authInstance.updatepassword = function(email, password, token) {
        return SessionService.passwordupdate({
          email: email,
          password: password,
          token: token
        });
      };
      authInstance.signout = function() {
        $rootScope.currentUser = {
          username: '',
          role: userRoles["public"]
        };
        $window.sessionStorage.user = angular.toJson($rootScope.currentUser);
        return SessionService["delete"];
      };
      authInstance.signin = function(email, password) {
        var deferred;
        deferred = $q.defer();
        SessionService.save({
          email: email,
          password: password
        }, function(response) {
          var role;
          role = findUserRoleByBitMask(response.role);
          $rootScope.currentUser.username = response.email;
          $rootScope.currentUser.firstname = response.firstname;
          $rootScope.currentUser.lastname = response.lastname;
          $rootScope.currentUser.auth_token = response.auth_token;
          $rootScope.currentUser.venue_id = response.venue_id;
          $rootScope.currentUser.role = role;
          $http.defaults.headers.common['x-auth-token'] = $rootScope.currentUser.auth_token;
          $window.sessionStorage.user = angular.toJson($rootScope.currentUser);
          return deferred.resolve(response);
        }, function(response) {
          $http.defaults.headers.common['x-auth-token'] = '';
          return deferred.reject(response);
        });
        return deferred.promise;
      };
      authInstance.authorize = function(accessLevel, role) {
        if (!role) {
          role = $rootScope.currentUser.role;
        }
        return accessLevel.bitMask & role.bitMask;
      };
      authInstance.isLoggedIn = function() {
        return $rootScope.currentUser.role.title !== userRoles["public"].title;
      };
      authInstance.getCurrentUser = function() {
        return $rootScope.currentUser;
      };
      return authInstance;
    }
  ]).factory('UserService', [
    '$resource', function($resource) {
      return $resource('/v1/users/:verb/:id', {}, {
        "new": {
          method: 'GET',
          isArray: false,
          params: {
            verb: 'new'
          }
        },
        getbytoken: {
          method: 'GET',
          isArray: false,
          params: {
            verb: 'getbytoken'
          }
        },
        post: {
          method: 'POST',
          isArray: false,
          params: {}
        },
        put: {
          method: 'PUT',
          isArray: false,
          params: {}
        }
      });
    }
  ]).factory('VenueService', [
    '$resource', function($resource) {
      return $resource('/v1/venues/:verb/:id', {}, {
        "new": {
          method: 'GET',
          isArray: false,
          params: {
            verb: 'new'
          }
        },
        post: {
          method: 'POST',
          isArray: false,
          params: {}
        },
        put: {
          method: 'PUT',
          isArray: false,
          params: {}
        }
      });
    }
  ]).factory('ExpandableService', [
    '$resource', function($resource) {
      return $resource('/v1/order_items', {}, {
      });
    }
  ]).factory('ProductService', [
    '$resource', function($resource) {
      return $resource('/v1/venues/:venueId/products/:verb/:id', {}, {
        "new": {
          method: 'GET',
          isArray: false,
          params: {
            verb: 'new'
          }
        },
        post: {
          method: 'POST',
          isArray: false,
          params: {}
        },
        put: {
          method: 'PUT',
          isArray: false,
          params: {}
        }
      });
    }
  ]).factory('SessionService', [
    '$resource', function($resource) {
      return $resource('/v1/sessions/:verb/:id', {}, {
        passwordreset: {
          method: 'POST',
          isArray: false,
          params: {
            verb: 'passwordreset'
          }
        },
        passwordupdate: {
          method: 'POST',
          isArray: false,
          params: {
            verb: 'passwordupdate'
          }
        }
      });
    }
  ]);

}).call(this);

//# sourceMappingURL=services.js.map
